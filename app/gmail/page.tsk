// app/gmail/page.tsx
"use client";

import { useMemo, useState } from "react";

const CID = process.env.NEXT_PUBLIC_GOOGLE_CLIENT_ID || "";
const CALLBACK = process.env.NEXT_PUBLIC_N8N_CALLBACK_URL || ""; // e.g. https://YOUR-N8N/webhook/oauth/google/callback
const SEND_URL = process.env.NEXT_PUBLIC_N8N_SEND_URL || "";      // e.g. https://YOUR-N8N/webhook/send-gmail
const USER_ID = process.env.NEXT_PUBLIC_USER_ID || "demo-user";   // replace with your real user id

export default function GmailPage() {
  const [to, setTo] = useState("");
  const [subject, setSubject] = useState("");
  const [body, setBody] = useState("");
  const [status, setStatus] = useState<string | null>(null);

  const connectUrl = useMemo(() => {
    const params = new URLSearchParams({
      client_id: CID,
      redirect_uri: CALLBACK,
      response_type: "code",
      access_type: "offline",
      prompt: "consent",
      scope: "https://www.googleapis.com/auth/gmail.send",
      state: USER_ID,
    });
    return `https://accounts.google.com/o/oauth2/v2/auth?${params.toString()}`;
  }, []);

  const envOk = CID && CALLBACK && SEND_URL;

  async function onSend(e: React.FormEvent) {
    e.preventDefault();
    setStatus("Sending…");
    try {
      const res = await fetch(SEND_URL, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          userId: USER_ID,
          to,
          subject,
          text: body, // if your n8n expects HTML, send `html: body` and update MIME there
        }),
      });
      const json = await res.json().catch(() => ({}));
      if (!res.ok) throw new Error(json?.error || `HTTP ${res.status}`);
      setStatus(`Sent ✔ ${json.id ? `id: ${json.id}` : ""}`);
      setTo("");
      setSubject("");
      setBody("");
    } catch (err: any) {
      setStatus(`Failed ✖ ${err.message || String(err)}`);
    }
  }

  return (
    <main style={{ maxWidth: 600, margin: "40px auto", padding: 16, fontFamily: "system-ui, sans-serif" }}>
      <h1 style={{ marginBottom: 8 }}>Gmail (beta)</h1>
      <p style={{ margin: "0 0 16px" }}>1) Connect Gmail. 2) Send an email.</p>

      <div style={{ display: "flex", gap: 12, alignItems: "center", marginBottom: 24 }}>
        <a
          href={connectUrl}
          aria-disabled={!envOk}
          style={{
            pointerEvents: envOk ? "auto" : "none",
            opacity: envOk ? 1 : 0.5,
            display: "inline-block",
            padding: "10px 14px",
            borderRadius: 8,
            border: "1px solid #ccc",
            textDecoration: "none",
          }}
        >
          Connect Gmail
        </a>
        {!envOk && (
          <small style={{ color: "#a00" }}>
            Set NEXT_PUBLIC_GOOGLE_CLIENT_ID, NEXT_PUBLIC_N8N_CALLBACK_URL, NEXT_PUBLIC_N8N_SEND_URL.
          </small>
        )}
      </div>

      <form onSubmit={onSend} style={{ display: "grid", gap: 12 }}>
        <label>
          To (email)
          <input
            type="email"
            required
            value={to}
            onChange={(e) => setTo(e.target.value)}
            placeholder="to@example.com"
            style={{ width: "100%", padding: 8, borderRadius: 6, border: "1px solid #ccc", marginTop: 6 }}
          />
        </label>

        <label>
          Subject
          <input
            required
            value={subject}
            onChange={(e) => setSubject(e.target.value)}
            placeholder="Hello"
            style={{ width: "100%", padding: 8, borderRadius: 6, border: "1px solid #ccc", marginTop: 6 }}
          />
        </label>

        <label>
          Body
          <textarea
            required
            rows={6}
            value={body}
            onChange={(e) => setBody(e.target.value)}
            placeholder="Type your message…"
            style={{ width: "100%", padding: 8, borderRadius: 6, border: "1px solid #ccc", marginTop: 6 }}
          />
        </label>

        <button
          type="submit"
          disabled={!envOk}
          style={{
            padding: "10px 14px",
            borderRadius: 8,
            border: "1px solid #ccc",
            background: "#f5f5f5",
            cursor: envOk ? "pointer" : "not-allowed",
          }}
        >
          Send
        </button>

        {status && <p style={{ marginTop: 6 }}>{status}</p>}
      </form>

      <p style={{ marginTop: 14, fontSize: 12, color: "#666" }}>
        Callback: <code>{CALLBACK || "not set"}</code> · Webhook: <code>{SEND_URL || "not set"}</code>
      </p>
    </main>
  );
}